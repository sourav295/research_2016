==================================================================================
COMMIT + PUSH
==================================================================================

git add .
git commit -m "[message]"
git push -u origin master (use option -f for force commit)


==================================================================================
SIMULATION WORK FLOW
==================================================================================

1) Network topology Setup (config xml in ./src/resource/xml/[ baseline| streamline ]/[ router.xml| roadm.xml| topology.xml ])
2) Simulation parameters configuration (src in ./src/configure.py & ./src/cost.py)
3) Execution
	There are 2 mode of execution (set in configuration )- [TestRun | NON TestRun]:
	
	NON TestRun
	- Concentrated on producing the final result (pkts dropped vs arrival rate, no. of packets produced, etc),
	  loggers are switched off from logging intermediatary infomation.
	- Results are stored in 
		- .src/resource/log/baseline/    if  baseline
		- .src/resource/log/streamline/  if  streamline
	- As the goal is to calculate the network capacity, the simulation runs for a range of packet arrival rates.
	- The arrival rates are incremented after each run and observations like drop count is recorded.
	- The start / end and increments on arrival rates are defined in the config file.

	TestRun
	- Only executes once (not a range of arrival rates).
	- The arrival rate selected is the start_rate defined in configuration.py 
	- Simulation collects all sorts of information. (stored in ./src/resource/log/)
	- Logs:
		- tolopology.log --> can be used to verify the links
		- simulation.log --> logs pcks generated and pcks received in the cronological order of events
		- packet.log	 --> each segment in the file stores information about the pkt's entire lifetime from src to dest. 
				     e.g. delays experienced on linecard, propagation etc



==================================================================================
CONFIGS
==================================================================================


**General configuration**

1) architecture - {achitecture = architecture_list[0]} 
There are 2 achitectures to choose from.
The config xmls to follow depends on the chosen architecture- either src/xml/baseline/ OR src/xml/streamline/ .
The same applies for the result files- /log/baseline/ OR /log/streamline/

2) qlimit:
Queue limits expressed in bytes

3) delay_over_IP:
The propagation delay experienced by packets on every link (except on optical links, propagation delay over optical is considered 0)

4) N_Channels:
No. of lambdas permitted by the system.

5) nPrioLevels:
Number of Priority levels for the packets generated. Would be identified by priority queues in IP routers

6) start_rate / end_rate / rate_increments:
If the values are 10 20 and 2 respectively, the simulation will run the code for arrival rates-
[10, 12, 14, 16 and 18]
The first run will take 10 to be the MEAN arrival rate for all servers in the system, the second run takes 12 and so on.

7) delay_fact_SDN / delay_fact_NFV
The factor by which the delay produced by an SDN / NFV components exceeds the delay on traditional network hardware.

8) simulation_until
The time until when the descrete event simulation runs.

9) testrun  = (True / False)
The difference is discribed above in the work flow section.

10) simulate_delay_on_server  = (True / False)
Ideally this should be set to true.
After pkts are generated on the servers, it's loaded on to the links (transimission delay simulation). You could switch this delay off so that the pkts are loaded as soon as they are generated, to avoid waiting time and to populate the links faster.

** XML Configuration **

I'll only explain few things here just to keep it simple. Like-

-How to classify a network component as NFV or a SDN
-How to change the mean pkt size
-How you could tone down the values of 1G / 10G / 100G to make the simulation to decrease the simulation time.



